var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){var e,t,n,i,r,o,a,s,l,u,c,d,f,h,p,m,y,v,g,b,x,S,w,k,E,T,O,P,L=function e(t){var n=new e.Builder;return n.pipeline.add(e.trimmer,e.stopWordFilter,e.stemmer),n.searchPipeline.add(e.stemmer),t.call(n,n),n.build()};L.version="2.0.0-alpha.5",(L.utils={}).warn=(P=this,function(e){P.console&&console.warn&&console.warn(e)}),L.utils.asString=function(e){return void 0===e||null===e?"":e.toString()},L.idf=function(e,t){var n=0;for(var i in e)"_index"!=i&&(n+=Object.keys(e[i]).length);return(t-n+.5)/(n+.5)},(L.Token=function(e,t){this.str=e||"",this.metadata=t||{}}).prototype.toString=function(){return this.str},L.Token.prototype.update=function(e){return this.str=e(this.str,this.metadata),this},L.Token.prototype.clone=function(e){return new L.Token((e=e||function(e){return e})(this.str,this.metadata),this.metadata)},(L.tokenizer=function(e){if(null==e||void 0==e)return[];if(Array.isArray(e))return e.map(function(e){return new L.Token(L.utils.asString(e).toLowerCase())});for(var t=e.toString().trim().toLowerCase(),n=t.length,i=[],r=0,o=0;n>=r;r++){var a=r-o;(t.charAt(r).match(L.tokenizer.separator)||r==n)&&(a>0&&i.push(new L.Token(t.slice(o,r),{position:[o,a],index:i.length})),o=r+1)}return i}).separator=/[\s\-]+/,(L.Pipeline=function(){this._stack=[]}).registeredFunctions={},L.Pipeline.registerFunction=function(e,t){t in this.registeredFunctions&&L.utils.warn("Overwriting existing registered function: "+t),e.label=t,L.Pipeline.registeredFunctions[e.label]=e},L.Pipeline.warnIfFunctionNotRegistered=function(e){e.label&&e.label in this.registeredFunctions||L.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},L.Pipeline.load=function(e){var t=new L.Pipeline;return e.forEach(function(e){var n=L.Pipeline.registeredFunctions[e];if(!n)throw new Error("Cannot load unregistered function: "+e);t.add(n)}),t},L.Pipeline.prototype.add=function(){Array.prototype.slice.call(arguments).forEach(function(e){L.Pipeline.warnIfFunctionNotRegistered(e),this._stack.push(e)},this)},L.Pipeline.prototype.after=function(e,t){L.Pipeline.warnIfFunctionNotRegistered(t);var n=this._stack.indexOf(e);if(-1==n)throw new Error("Cannot find existingFn");n+=1,this._stack.splice(n,0,t)},L.Pipeline.prototype.before=function(e,t){L.Pipeline.warnIfFunctionNotRegistered(t);var n=this._stack.indexOf(e);if(-1==n)throw new Error("Cannot find existingFn");this._stack.splice(n,0,t)},L.Pipeline.prototype.remove=function(e){var t=this._stack.indexOf(e);-1!=t&&this._stack.splice(t,1)},L.Pipeline.prototype.run=function(e){for(var t=this._stack.length,n=0;t>n;n++){var i=this._stack[n];e=e.reduce(function(t,n,r){var o=i(n,r,e);return void 0===o||""===o?t:t.concat(o)},[])}return e},L.Pipeline.prototype.runString=function(e){var t=new L.Token(e);return this.run([t]).map(function(e){return e.toString()})},L.Pipeline.prototype.reset=function(){this._stack=[]},L.Pipeline.prototype.toJSON=function(){return this._stack.map(function(e){return L.Pipeline.warnIfFunctionNotRegistered(e),e.label})},(L.Vector=function(e){this._magnitude=0,this.elements=e||[]}).prototype.insert=function(e,t){if(this._magnitude=0,0!=this.elements.length){for(var n=0,i=this.elements.length,r=i-n,o=2*Math.floor(r/2/2),a=this.elements[o];r>2;){if(a==e)throw"duplicate index";e>a&&(n=o),a>e&&(i=o),r=i-n,o=n+2*Math.floor(r/2/2),a=this.elements[o]}a>e&&this.elements.splice(o,0,e,t),e>a&&this.elements.splice(o+2,0,e,t)}else this.elements.push(e,t)},L.Vector.prototype.magnitude=function(){if(this._magnitude)return this._magnitude;for(var e=0,t=this.elements.length,n=1;t>n;n+=2){var i=this.elements[n];e+=i*i}return this._magnitude=Math.sqrt(e)},L.Vector.prototype.dot=function(e){for(var t=0,n=this.elements,i=e.elements,r=n.length,o=i.length,a=0,s=0,l=0,u=0;r>l&&o>u;)a=n[l],(s=i[u])>a?l+=2:a>s?u+=2:a==s&&(t+=n[l+1]*i[u+1],l+=2,u+=2);return t},L.Vector.prototype.similarity=function(e){return this.dot(e)/(this.magnitude()*e.magnitude())},L.Vector.prototype.toArray=function(){for(var e=new Array(this.elements.length/2),t=1,n=0;t<this.elements.length;t+=2,n++)e[n]=this.elements[t];return e},L.Vector.prototype.toJSON=function(){return this.elements},L.stemmer=(n={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},i={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},r="[aeiouy]",o="[^aeiou][^aeiouy]*",a=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*"),s=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*[aeiouy][aeiou]*[^aeiou][^aeiouy]*"),l=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*([aeiouy][aeiou]*)?$"),u=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy]"),c=/^(.+?)(ss|i)es$/,d=/^(.+?)([^s])s$/,f=/^(.+?)eed$/,h=/^(.+?)(ed|ing)$/,p=/.$/,m=/(at|bl|iz)$/,y=new RegExp("([^aeiouylsz])\\1$"),v=new RegExp("^"+o+r+"[^aeiouwxy]$"),g=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,x=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,S=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,w=/^(.+?)(s|t)(ion)$/,k=/^(.+?)e$/,E=/ll$/,T=new RegExp("^"+o+r+"[^aeiouwxy]$"),O=function(e){var t,r,o,O,P,L,C;if(e.length<3)return e;if("y"==(o=e.substr(0,1))&&(e=o.toUpperCase()+e.substr(1)),P=d,(O=c).test(e)?e=e.replace(O,"$1$2"):P.test(e)&&(e=e.replace(P,"$1$2")),P=h,(O=f).test(e)){I=O.exec(e);(O=a).test(I[1])&&(O=p,e=e.replace(O,""))}else if(P.test(e)){I=P.exec(e);t=I[1],(P=u).test(t)&&(L=y,C=v,(P=m).test(e=t)?e+="e":L.test(e)?(O=p,e=e.replace(O,"")):C.test(e)&&(e+="e"))}if((O=g).test(e)){I=O.exec(e);e=(t=I[1])+"i"}if((O=b).test(e)){I=O.exec(e);t=I[1],r=I[2],(O=a).test(t)&&(e=t+n[r])}if((O=x).test(e)){I=O.exec(e);t=I[1],r=I[2],(O=a).test(t)&&(e=t+i[r])}if(P=w,(O=S).test(e)){I=O.exec(e);t=I[1],(O=s).test(t)&&(e=t)}else if(P.test(e)){I=P.exec(e);t=I[1]+I[2],(P=s).test(t)&&(e=t)}if((O=k).test(e)){var I=O.exec(e);t=I[1],P=l,L=T,((O=s).test(t)||P.test(t)&&!L.test(t))&&(e=t)}return P=s,(O=E).test(e)&&P.test(e)&&(O=p,e=e.replace(O,"")),"y"==o&&(e=o.toLowerCase()+e.substr(1)),e},function(e){return e.update(O)}),L.Pipeline.registerFunction(L.stemmer,"stemmer"),L.generateStopWordFilter=function(e){var t=e.reduce(function(e,t){return e[t]=t,e},{});return function(e){return e&&t[e.toString()]!==e.toString()?e:void 0}},L.stopWordFilter=L.generateStopWordFilter(["a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your"]),L.Pipeline.registerFunction(L.stopWordFilter,"stopWordFilter"),L.trimmer=function(e){return e.update(function(e){return e.replace(/^\W+/,"").replace(/\W+$/,"")})},L.Pipeline.registerFunction(L.trimmer,"trimmer"),(L.TokenSet=function(){this.final=!1,this.edges={},this.id=L.TokenSet._nextId,L.TokenSet._nextId+=1})._nextId=1,L.TokenSet.fromArray=function(e){for(var t=new L.TokenSet.Builder,n=0,i=e.length;i>n;n++)t.insert(e[n]);return t.finish(),t.root},L.TokenSet.fromClause=function(e){return"editDistance"in e?L.TokenSet.fromFuzzyString(e.term,e.editDistance):L.TokenSet.fromString(e.term)},L.TokenSet.fromFuzzyString=function(e,t){for(var n=new L.TokenSet,i=[{node:n,editsRemaining:t,str:e}];i.length;){var r,o,a,s=i.pop();if(s.str.length>0)(a=s.str.charAt(0))in s.node.edges?r=s.node.edges[a]:(r=new L.TokenSet,s.node.edges[a]=r),1==s.str.length?r.final=!0:i.push({node:r,editsRemaining:s.editsRemaining,str:s.str.slice(1)});if(s.editsRemaining>0&&s.str.length>1)(a=s.str.charAt(1))in s.node.edges?o=s.node.edges[a]:(o=new L.TokenSet,s.node.edges[a]=o),s.str.length<=2?o.final=!0:i.push({node:o,editsRemaining:s.editsRemaining-1,str:s.str.slice(2)});if(s.editsRemaining>0&&1==s.str.length&&(s.node.final=!0),s.editsRemaining>0&&s.str.length>=1){if("*"in s.node.edges)var l=s.node.edges["*"];else{l=new L.TokenSet;s.node.edges["*"]=l}1==s.str.length?l.final=!0:i.push({node:l,editsRemaining:s.editsRemaining-1,str:s.str.slice(1)})}if(s.editsRemaining>0){if("*"in s.node.edges)var u=s.node.edges["*"];else{u=new L.TokenSet;s.node.edges["*"]=u}0==s.str.length?u.final=!0:i.push({node:u,editsRemaining:s.editsRemaining-1,str:s.str})}if(s.editsRemaining>0&&s.str.length>1){var c,d=s.str.charAt(0),f=s.str.charAt(1);f in s.node.edges?c=s.node.edges[f]:(c=new L.TokenSet,s.node.edges[f]=c),1==s.str.length?c.final=!0:i.push({node:c,editsRemaining:s.editsRemaining-1,str:d+s.str.slice(2)})}}return n},L.TokenSet.fromString=function(e){for(var t=new L.TokenSet,n=t,i=!1,r=0,o=e.length;o>r;r++){var a=e[r],s=r==o-1;if("*"==a)i=!0,t.edges[a]=t,t.final=s;else{var l=new L.TokenSet;l.final=s,t.edges[a]=l,t=l,i&&(t.edges["*"]=n)}}return n},L.TokenSet.prototype.toArray=function(){for(var e=[],t=[{prefix:"",node:this}];t.length;){var n=t.pop(),i=Object.keys(n.node.edges),r=i.length;n.node.final&&e.push(n.prefix);for(var o=0;r>o;o++){var a=i[o];t.push({prefix:n.prefix.concat(a),node:n.node.edges[a]})}}return e},L.TokenSet.prototype.toString=function(){if(this._str)return this._str;for(var e=this.final?"1":"0",t=Object.keys(this.edges).sort(),n=t.length,i=0;n>i;i++){var r=t[i];e=e+r+this.edges[r].id}return e},L.TokenSet.prototype.intersect=function(e){for(var t=new L.TokenSet,n=void 0,i=[{qNode:e,output:t,node:this}];i.length;){n=i.pop();for(var r=Object.keys(n.qNode.edges),o=r.length,a=Object.keys(n.node.edges),s=a.length,l=0;o>l;l++)for(var u=r[l],c=0;s>c;c++){var d=a[c];if(d==u||"*"==u){var f=n.node.edges[d],h=n.qNode.edges[u],p=f.final&&h.final,m=void 0;d in n.output.edges?(m=n.output.edges[d]).final=m.final||p:((m=new L.TokenSet).final=p,n.output.edges[d]=m),i.push({qNode:h,output:m,node:f})}}}return t},L.TokenSet.Builder=function(){this.previousWord="",this.root=new L.TokenSet,this.uncheckedNodes=[],this.minimizedNodes={}},L.TokenSet.Builder.prototype.insert=function(e){var t,n=0;if(e<this.previousWord)throw new Error("Out of order word insertion");for(var i=0;i<e.length&&i<this.previousWord.length&&e[i]==this.previousWord[i];i++)n++;this.minimize(n),t=0==this.uncheckedNodes.length?this.root:this.uncheckedNodes[this.uncheckedNodes.length-1].child;for(i=n;i<e.length;i++){var r=new L.TokenSet,o=e[i];t.edges[o]=r,this.uncheckedNodes.push({parent:t,char:o,child:r}),t=r}t.final=!0,this.previousWord=e},L.TokenSet.Builder.prototype.finish=function(){this.minimize(0)},L.TokenSet.Builder.prototype.minimize=function(e){for(var t=this.uncheckedNodes.length-1;t>=e;t--){var n=this.uncheckedNodes[t],i=n.child.toString();i in this.minimizedNodes?n.parent.edges[n.char]=this.minimizedNodes[i]:(n.child._str=i,this.minimizedNodes[i]=n.child),this.uncheckedNodes.pop()}},(L.Index=function(e){this.invertedIndex=e.invertedIndex,this.documentVectors=e.documentVectors,this.tokenSet=e.tokenSet,this.documentCount=e.documentCount,this.averageDocumentLength=e.averageDocumentLength,this.b=e.b,this.k1=e.k1,this.fields=e.fields,this.pipeline=e.pipeline}).prototype.search=function(e){return this.query(function(t){new L.QueryParser(e,t).parse()})},L.Index.prototype.query=function(e){var t=new L.Query(this.fields),n={},i=new L.Vector;e.call(t,t);for(var r=0;r<t.clauses.length;r++){var o,a=t.clauses[r];o=a.usePipeline?this.pipeline.runString(a.term):[a.term];for(var s=0;s<o.length;s++){var l=o[s];a.term=l;for(var u=L.TokenSet.fromClause(a),c=this.tokenSet.intersect(u).toArray(),d=0;d<c.length;d++){var f=c[d],h=this.invertedIndex[f],p=h._index,m=L.idf(h,this.documentCount)*(1*(this.k1+1))/(this.k1*(1-this.b+this.b*(t.clauses.length/this.averageDocumentLength))+1);i.insert(p,m*a.boost);for(var y=0;y<a.fields.length;y++)for(var v=a.fields[y],g=h[v],b=Object.keys(g),x=0;x<b.length;x++){var S,w,k=b[x];S=g[k],w=new L.MatchData(f,v,S),k in n?n[k].combine(w):n[k]=w}}}}b=Object.keys(n);var E=[];for(r=0;r<b.length;r++){var T=b[r],O=this.documentVectors[T];m=i.similarity(O);E.push({ref:T,score:m,matchData:n[T]})}return E.sort(function(e,t){return t.score-e.score})},L.Index.prototype.toJSON=function(){var e=Object.keys(this.invertedIndex).sort().map(function(e){return[e,this.invertedIndex[e]]},this),t=Object.keys(this.documentVectors).map(function(e){return[e,this.documentVectors[e].toJSON()]},this);return{version:L.version,averageDocumentLength:this.averageDocumentLength,b:this.b,k1:this.k1,fields:this.fields,documentVectors:t,invertedIndex:e,pipeline:this.pipeline.toJSON()}},L.Index.load=function(e){var t={},n={},i=e.documentVectors,r=0,o={},a=e.invertedIndex,s=new L.TokenSet.Builder,l=L.Pipeline.load(e.pipeline);e.version!=L.version&&L.utils.warn("Version mismatch when loading serialised index. Current version of lunr '"+L.version+"' does not match serialized index '"+e.version+"'");for(var u=0;u<i.length;u++,r++){var c=(f=i[u])[0],d=f[1];n[c]=new L.Vector(d)}for(u=0;u<a.length;u++){var f,h=(f=a[u])[0],p=f[1];s.insert(h),o[h]=p}return s.finish(),t.b=e.b,t.k1=e.k1,t.fields=e.fields,t.averageDocumentLength=e.averageDocumentLength,t.documentCount=r,t.documentVectors=n,t.invertedIndex=o,t.tokenSet=s.root,t.pipeline=l,new L.Index(t)},(L.Builder=function(){this._ref="id",this._fields=[],this.invertedIndex={},this.documentTermFrequencies={},this.documentLengths={},this.tokenizer=L.tokenizer,this.pipeline=new L.Pipeline,this.searchPipeline=new L.Pipeline,this.documentCount=0,this._b=.75,this._k1=1.2,this.termIndex=0,this.metadataWhitelist=[]}).prototype.ref=function(e){this._ref=e},L.Builder.prototype.field=function(e){this._fields.push(e)},L.Builder.prototype.b=function(e){this._b=0>e?0:e>1?1:e},L.Builder.prototype.k1=function(e){this._k1=e},L.Builder.prototype.add=function(e){var t=e[this._ref],n={};this.documentCount+=1,this.documentTermFrequencies[t]=n,this.documentLengths[t]=0;for(var i=0;i<this._fields.length;i++){var r=this._fields[i],o=e[r],a=this.tokenizer(o),s=this.pipeline.run(a);this.documentLengths[t]+=s.length;for(var l=0;l<s.length;l++){var u=s[l];if(void 0==n[u]&&(n[u]=0),n[u]+=1,void 0==this.invertedIndex[u]){var c={_index:this.termIndex};this.termIndex+=1;for(var d=0;d<this._fields.length;d++)c[this._fields[d]]={};this.invertedIndex[u]=c}void 0==this.invertedIndex[u][r][t]&&(this.invertedIndex[u][r][t]={});for(var f=0;f<this.metadataWhitelist.length;f++){var h=this.metadataWhitelist[f],p=u.metadata[h];void 0==this.invertedIndex[u][r][t][h]&&(this.invertedIndex[u][r][t][h]=[]),this.invertedIndex[u][r][t][h].push(p)}}}},L.Builder.prototype.calculateAverageDocumentLengths=function(){for(var e=Object.keys(this.documentLengths),t=e.length,n=0,i=0;t>i;i++){var r=e[i];n+=this.documentLengths[r]}this.averageDocumentLength=n/t},L.Builder.prototype.createDocumentVectors=function(){for(var e={},t=Object.keys(this.documentTermFrequencies),n=t.length,i=0;n>i;i++){for(var r=t[i],o=this.documentLengths[r],a=new L.Vector,s=this.documentTermFrequencies[r],l=Object.keys(s),u=l.length,c=0;u>c;c++){var d=l[c],f=s[d],h=this.invertedIndex[d]._index,p=L.idf(this.invertedIndex[d],this.documentCount)*((this._k1+1)*f)/(this._k1*(1-this._b+this._b*(o/this.averageDocumentLength))+f);a.insert(h,p)}e[r]=a}this.documentVectors=e},L.Builder.prototype.createTokenSet=function(){this.tokenSet=L.TokenSet.fromArray(Object.keys(this.invertedIndex).sort())},L.Builder.prototype.build=function(){return this.calculateAverageDocumentLengths(),this.createDocumentVectors(),this.createTokenSet(),new L.Index({invertedIndex:this.invertedIndex,documentVectors:this.documentVectors,tokenSet:this.tokenSet,averageDocumentLength:this.averageDocumentLength,documentCount:this.documentCount,fields:this._fields,pipeline:this.searchPipeline,b:this._b,k1:this._k1})},L.Builder.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},(L.MatchData=function(e,t,n){this.metadata={},this.metadata[e]={},this.metadata[e][t]=n}).prototype.combine=function(e){for(var t=Object.keys(e.metadata),n=0;n<t.length;n++){var i=t[n],r=Object.keys(e.metadata[i]);void 0==this.metadata[i]&&(this.metadata[i]={});for(var o=0;o<r.length;o++){var a=r[o],s=Object.keys(e.metadata[i][a]);void 0==this.metadata[i][a]&&(this.metadata[i][a]={});for(var l=0;l<s.length;l++){var u=s[l];void 0==this.metadata[i][a][u]?this.metadata[i][a][u]=e.metadata[i][a][u]:this.metadata[i][a][u]=this.metadata[i][a][u].concat(e.metadata[i][a][u])}}}},(L.Query=function(e){this.clauses=[],this.allFields=e}).prototype.clause=function(e){return"fields"in e||(e.fields=this.allFields),"boost"in e||(e.boost=1),"usePipeline"in e||(e.usePipeline=!0),this.clauses.push(e),this},L.Query.prototype.term=function(e,t){var n=t||{};return n.term=e,this.clause(n),this},(L.QueryParseError=function(e,t,n){this.name="QueryParseError",this.message=e,this.start=t,this.end=n}).prototype=new Error,(L.QueryLexer=function(e){this.lexemes=[],this.str=e,this.length=e.length,this.pos=0,this.start=0}).prototype.run=function(){for(var e=L.QueryLexer.lexText;e;)e=e(this)},L.QueryLexer.prototype.emit=function(e){this.lexemes.push({type:e,str:this.str.slice(this.start,this.pos),start:this.start,end:this.pos}),this.start=this.pos},L.QueryLexer.prototype.next=function(){if(this.pos==this.length)return L.QueryLexer.EOS;var e=this.str.charAt(this.pos);return this.pos+=1,e},L.QueryLexer.prototype.width=function(){return this.pos-this.start},L.QueryLexer.prototype.ignore=function(){this.start==this.pos&&(this.pos+=1),this.start=this.pos},L.QueryLexer.prototype.backup=function(){this.pos-=1},L.QueryLexer.prototype.acceptDigitRun=function(){var e,t;do{t=(e=this.next()).charCodeAt(0)}while(t>47&&58>t);e!=L.QueryLexer.EOS&&this.backup()},L.QueryLexer.prototype.more=function(){return this.pos<this.length},L.QueryLexer.EOS="EOS",L.QueryLexer.FIELD="FIELD",L.QueryLexer.TERM="TERM",L.QueryLexer.EDIT_DISTANCE="EDIT_DISTANCE",L.QueryLexer.BOOST="BOOST",L.QueryLexer.lexField=function(e){return e.backup(),e.emit(L.QueryLexer.FIELD),e.ignore(),L.QueryLexer.lexText},L.QueryLexer.lexTerm=function(e){return e.width()>1&&(e.backup(),e.emit(L.QueryLexer.TERM)),e.ignore(),e.more()?L.QueryLexer.lexText:void 0},L.QueryLexer.lexEditDistance=function(e){return e.ignore(),e.acceptDigitRun(),e.emit(L.QueryLexer.EDIT_DISTANCE),L.QueryLexer.lexText},L.QueryLexer.lexBoost=function(e){return e.ignore(),e.acceptDigitRun(),e.emit(L.QueryLexer.BOOST),L.QueryLexer.lexText},L.QueryLexer.lexEOS=function(e){e.width()>0&&e.emit(L.QueryLexer.TERM)},L.QueryLexer.lexText=function(e){for(;;){var t=e.next();if(t==L.QueryLexer.EOS)return L.QueryLexer.lexEOS;if(":"==t)return L.QueryLexer.lexField;if("~"==t)return e.backup(),e.width()>0&&e.emit(L.QueryLexer.TERM),L.QueryLexer.lexEditDistance;if("^"==t)return e.backup(),e.width()>0&&e.emit(L.QueryLexer.TERM),L.QueryLexer.lexBoost;if(" "==t)return L.QueryLexer.lexTerm}},(L.QueryParser=function(e,t){this.lexer=new L.QueryLexer(e),this.query=t,this.currentClause={},this.lexemeIdx=0}).prototype.parse=function(){this.lexer.run(),this.lexemes=this.lexer.lexemes;for(var e=L.QueryParser.parseFieldOrTerm;e;)e=e(this);return this.query},L.QueryParser.prototype.peekLexeme=function(){return this.lexemes[this.lexemeIdx]},L.QueryParser.prototype.consumeLexeme=function(){var e=this.peekLexeme();return this.lexemeIdx+=1,e},L.QueryParser.prototype.nextClause=function(){var e=this.currentClause;this.query.clause(e),this.currentClause={}},L.QueryParser.parseFieldOrTerm=function(e){var t=e.peekLexeme();if(void 0!=t)switch(t.type){case L.QueryLexer.FIELD:return L.QueryParser.parseField;case L.QueryLexer.TERM:return L.QueryParser.parseTerm;default:var n="expected either a field or a term, found "+t.type+" with value '"+t.str+"'";throw new L.QueryParseError(n,t.start,t.end)}},L.QueryParser.parseField=function(e){var t=e.consumeLexeme();if(void 0!=t){if(-1==e.query.allFields.indexOf(t.str)){var n=e.query.allFields.map(function(e){return"'"+e+"'"}).join(),i="unrecognised field '"+t.str+"', possible fields: "+n;throw new L.QueryParseError(i,t.start,t.end)}e.currentClause.fields=[t.str];var r=e.peekLexeme();if(void 0==r)throw new L.QueryParseError(i="expecting term, found nothing",t.start,t.end);switch(r.type){case L.QueryLexer.TERM:return L.QueryParser.parseTerm;default:i="expecting a field, found '"+r.type+"'";throw new L.QueryParseError(i,r.start,r.end)}}},L.QueryParser.parseTerm=function(e){var t=e.consumeLexeme();if(void 0!=t){e.currentClause.term=t.str.toLowerCase(),-1!=t.str.indexOf("*")&&(e.currentClause.usePipeline=!1);var n=e.peekLexeme();if(void 0==n)return void e.nextClause();switch(n.type){case L.QueryLexer.TERM:return e.nextClause(),L.QueryParser.parseTerm;case L.QueryLexer.FIELD:return e.nextClause(),L.QueryParser.parseField;case L.QueryLexer.EDIT_DISTANCE:return L.QueryParser.parseEditDistance;case L.QueryLexer.BOOST:return L.QueryParser.parseBoost;default:var i="Unexpected lexeme type '"+n.type+"'";throw new L.QueryParseError(i,n.start,n.end)}}},L.QueryParser.parseEditDistance=function(e){var t=e.consumeLexeme();if(void 0!=t){var n=parseInt(t.str,10);if(isNaN(n))throw new L.QueryParseError(r="edit distance must be numeric",t.start,t.end);e.currentClause.editDistance=n;var i=e.peekLexeme();if(void 0==i)return void e.nextClause();switch(i.type){case L.QueryLexer.TERM:return e.nextClause(),L.QueryParser.parseTerm;case L.QueryLexer.FIELD:return e.nextClause(),L.QueryParser.parseField;case L.QueryLexer.EDIT_DISTANCE:return L.QueryParser.parseEditDistance;case L.QueryLexer.BOOST:return L.QueryParser.parseBoost;default:var r="Unexpected lexeme type '"+i.type+"'";throw new L.QueryParseError(r,i.start,i.end)}}},L.QueryParser.parseBoost=function(e){var t=e.consumeLexeme();if(void 0!=t){var n=parseInt(t.str,10);if(isNaN(n))throw new L.QueryParseError(r="boost must be numeric",t.start,t.end);e.currentClause.boost=n;var i=e.peekLexeme();if(void 0==i)return void e.nextClause();switch(i.type){case L.QueryLexer.TERM:return e.nextClause(),L.QueryParser.parseTerm;case L.QueryLexer.FIELD:return e.nextClause(),L.QueryParser.parseField;case L.QueryLexer.EDIT_DISTANCE:return L.QueryParser.parseEditDistance;case L.QueryLexer.BOOST:return L.QueryParser.parseBoost;default:var r="Unexpected lexeme type '"+i.type+"'";throw new L.QueryParseError(r,i.start,i.end)}}},e=this,t=function(){return L},"function"==typeof define&&define.amd?define(t):"object"==("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=t():e.lunr=t()}();_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.lozad=t()}(this,function(){"use strict";function e(e){e.setAttribute("data-loaded",!0)}var t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},n={rootMargin:"0px",threshold:0,load:function(e){e.getAttribute("data-src")&&(e.src=e.getAttribute("data-src")),e.getAttribute("data-srcset")&&(e.srcset=e.getAttribute("data-srcset")),e.getAttribute("data-background-image")&&(e.style.backgroundImage="url("+e.getAttribute("data-background-image")+")")}},i=function(e){return"true"===e.getAttribute("data-loaded")};return function(){var r,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:".lozad",a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=t({},n,a),l=s.rootMargin,u=s.threshold,c=s.load,d=void 0;return window.IntersectionObserver&&(d=new IntersectionObserver((r=c,function(t,n){t.forEach(function(t){t.intersectionRatio>0&&(n.unobserve(t.target),i(t.target)||(r(t.target),e(t.target)))})}),{rootMargin:l,threshold:u})),{observe:function(){for(var t=document.querySelectorAll(o),n=0;n<t.length;n++)i(t[n])||(d?d.observe(t[n]):(c(t[n]),e(t[n])))},triggerLoad:function(t){i(t)||(c(t),e(t))}}}});var tns=function(){function e(){for(var e,t,n,i=arguments[0]||{},r=1,o=arguments.length;r<o;r++)if(null!==(e=arguments[r]))for(t in e)i!==(n=e[t])&&void 0!==n&&(i[t]=n);return i}function t(e){return["true","false"].indexOf(e)>=0?JSON.parse(e):e}function n(e,t,n){return n&&localStorage.setItem(e,t),t}function i(){var e=document,t=e.body;return t||((t=e.createElement("body")).fake=!0),t}Object.keys||(Object.keys=function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}),function(){"use strict";"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)})}();var r=document.documentElement;function o(e){var t="";return e.fake&&(t=r.style.overflow,e.style.background="",e.style.overflow=r.style.overflow="hidden",r.appendChild(e)),t}function a(e,t){e.fake&&(e.remove(),r.style.overflow=t,r.offsetHeight)}function s(e,t,n,i){"insertRule"in e?e.insertRule(t+"{"+n+"}",i):e.addRule(t,n,i)}function l(e){return("insertRule"in e?e.cssRules:e.rules).length}function u(e,t){return e.className.indexOf(t)>=0}function c(e,t){u(e,t)||(e.className+=" "+t)}function d(e,t){u(e,t)&&(e.className=e.className.replace(t,""))}function f(e,t){return e.hasAttribute(t)}function h(e){return void 0!==e.item}function p(e,t){if(e=h(e)||e instanceof Array?e:[e],"[object Object]"===Object.prototype.toString.call(t))for(var n=e.length;n--;)for(var i in t)e[n].setAttribute(i,t[i])}function m(e,t){e=h(e)||e instanceof Array?e:[e];for(var n=(t=t instanceof Array?t:[t]).length,i=e.length;i--;)for(var r=n;r--;)e[i].removeAttribute(t[r])}function y(e){f(e,"hidden")||p(e,{hidden:""})}function v(e){f(e,"hidden")&&m(e,"hidden")}function g(e){return e.offsetWidth>0&&e.offsetHeight>0}function b(e){for(var t=document.createElement("fakeelement"),n=(e.length,0);n<e.length;n++){var i=e[n];if(void 0!==t.style[i])return i}return!1}function x(e,t){var n=!1;return/^Webkit/.test(e)?n="webkit"+t+"End":/^O/.test(e)?n="o"+t+"End":e&&(n=t.toLowerCase()+"end"),n}var S=!1;try{var w=Object.defineProperty({},"passive",{get:function(){S=!0}});window.addEventListener("test",null,w)}catch(e){}var k=!!S&&{passive:!0};function E(e,t){for(var n in t){var i=("touchstart"===n||"touchmove"===n)&&k;e.addEventListener(n,t[n],i)}}function T(e,t){for(var n in t){var i=["touchstart","touchmove"].indexOf(n)>=0&&k;e.removeEventListener(n,t[n],i)}}var O=navigator.userAgent,P=!0,L={};try{(L=localStorage).tnsApp?L.tnsApp!==O&&(L.tnsApp=O,["tC","tSP","tMQ","tTf","tTDu","tTDe","tADu","tADe","tTE","tAE"].forEach(function(e){L.removeItem(e)})):L.tnsApp=O}catch(e){P=!1}var C,I,A,M,N,D,R,B,Q,W,_,F,z,j,$=document,q=window,G={ENTER:13,SPACE:32,PAGEUP:33,PAGEDOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40},V=t(L.tC)||n("tC",function(){var e=document,t=i(),n=o(t),r=e.createElement("div"),s=!1;t.appendChild(r);try{for(var l,u=["calc(10px)","-moz-calc(10px)","-webkit-calc(10px)"],c=0;c<3;c++)if(l=u[c],r.style.width=l,10===r.offsetWidth){s=l.replace("(10px)","");break}}catch(e){}return t.fake?a(t,n):r.remove(),s}(),P),H=t(L.tSP)||n("tSP",(A=document,M=i(),N=o(M),D=A.createElement("div"),R=A.createElement("div"),D.style.cssText="width: 10px",R.style.cssText="float: left; width: 5.5px; height: 10px;",C=R.cloneNode(!0),D.appendChild(R),D.appendChild(C),M.appendChild(D),I=R.offsetTop!==C.offsetTop,M.fake?a(M,N):D.remove(),I),P),X=t(L.tMQ)||n("tMQ",(Q=document,W=i(),_=o(W),F=Q.createElement("div"),z=Q.createElement("style"),j="@media all and (min-width:1px){.tns-mq-test{position:absolute}}",z.type="text/css",F.className="tns-mq-test",W.appendChild(z),W.appendChild(F),z.styleSheet?z.styleSheet.cssText=j:z.appendChild(Q.createTextNode(j)),B=window.getComputedStyle?window.getComputedStyle(F).position:F.currentStyle.position,W.fake?a(W,_):F.remove(),"absolute"===B),P),K=t(L.tTf)||n("tTf",b(["transform","WebkitTransform","MozTransform","msTransform","OTransform"]),P),J=t(L.tTDu)||n("tTDu",b(["transitionDuration","WebkitTransitionDuration","MozTransitionDuration","OTransitionDuration"]),P),U=t(L.tTDe)||n("tTDe",b(["transitionDelay","WebkitTransitionDelay","MozTransitionDelay","OTransitionDelay"]),P),Y=t(L.tADu)||n("tADu",b(["animationDuration","WebkitAnimationDuration","MozAnimationDuration","OAnimationDuration"]),P),Z=t(L.tADe)||n("tADe",b(["animationDelay","WebkitAnimationDelay","MozAnimationDelay","OAnimationDelay"]),P),ee=t(L.tTE)||n("tTE",x(J,"Transition"),P),te=t(L.tAE)||n("tAE",x(Y,"Animation"),P);X||(H=!1);return function(t){t=e({container:$.querySelector(".slider"),mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,slideBy:1,controls:!0,controlsText:["prev","next"],controlsContainer:!1,nav:!0,navContainer:!1,navAsThumbnails:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayButtonOutput:!0,autoplayResetOnVisibility:!0,loop:!0,rewind:!1,autoHeight:!1,responsive:!1,lazyload:!1,touch:!0,mouseDrag:!1,nested:!1,freezable:!0,onInit:!1},t||{}),["container","controlsContainer","navContainer","autoplayButton"].forEach(function(e){"string"==typeof t[e]&&(t[e]=$.querySelector(t[e]))});var n=q.console&&"function"==typeof q.console.warn;if(t.container&&t.container.nodeName){if(!(t.container.children.length<2)){if(t.responsive){var i={},r=t.responsive;for(var o in r){var a=r[o];i[o]="number"==typeof a?{items:a}:a}t.responsive=i,i=null,0 in t.responsive&&delete(t=e(t,t.responsive[0])).responsive[0]}var h="carousel"===t.mode;if(!h){t.axis="horizontal",t.rewind=!1,t.loop=!0,t.edgePadding=!1;var b="tns-fadeIn",x="tns-fadeOut",S=!1,w=t.animateNormal||"tns-normal";ee&&te&&(b=t.animateIn||b,x=t.animateOut||x,S=t.animateDelay||S)}var k,O="horizontal"===t.axis,P=$.createElement("div"),L=$.createElement("div"),C=t.container,I=C.parentNode,A=C.children,M=A.length,N=I.clientWidth,D=t.responsive,R=[],B=!1,Q=0,W=Ft();if(D){(B=Object.keys(D).map(function(e){return parseInt(e)}).sort(function(e,t){return e-t})).forEach(function(e){R=R.concat(Object.keys(D[e]))});var _=[];R.forEach(function(e){_.indexOf(e)<0&&_.push(e)}),R=_,Kt()}var F,z,j,ne,ie,re,oe=jt("items"),ae="page"===jt("slideBy")?oe:jt("slideBy"),se=t.nested,le=jt("gutter"),ue=jt("edgePadding"),ce=jt("fixedWidth"),de=jt("arrowKeys"),fe=jt("speed"),he=t.rewind,pe=!he&&t.loop,me=jt("autoHeight"),ye=(re=document.createElement("style"),ie&&re.setAttribute("media",ie),document.querySelector("head").appendChild(re),re.sheet?re.sheet:re.styleSheet),ve=t.lazyload,ge=[],be=pe?2*M:0,xe=h?M+2*be:M+be,Se=!(!ce||pe||ue),we=!h||!pe,ke=O?"left":"top",Ee="",Te="",Oe=t.startIndex?(_t=t.startIndex,(_t%=M)<0&&(_t+=M),_t=Math.min(_t,xe-oe)):h?be:0,Pe=Oe,Le=0,Ce=xe-oe,Ie=!1,Ae=t.onInit,Me=new function(){return{topics:{},on:function(e,t){this.topics[e]=this.topics[e]||[],this.topics[e].push(t)},off:function(e,t){if(this.topics[e])for(var n=0;n<this.topics[e].length;n++)if(this.topics[e][n]===t){this.topics[e].splice(n,1);break}},emit:function(e,t){this.topics[e]&&this.topics[e].forEach(function(e){e(t)})}}},Ne=C.id,De=" tns-slider tns-"+t.mode,Re=C.id||(ne=window.tnsId,window.tnsId=ne?ne+1:1,"tns"+window.tnsId),Be=jt("disable"),Qe=t.freezable,We=!!Be||!!Qe&&M<=oe,_e="inner"===se?" !important":"",Fe={click:bn,keydown:function(e){switch((e=e||q.event).keyCode){case G.LEFT:case G.UP:case G.PAGEUP:et.disabled||bn(e,-1);break;case G.RIGHT:case G.DOWN:case G.PAGEDOWN:tt.disabled||bn(e,1);break;case G.HOME:gn(0,e);break;case G.END:gn(M-1,e)}}},ze={click:function(e){if(!Ie){for(var t=(e=e||q.event).target||e.srcElement;t!==ut&&!f(t,"data-nav");)t=t.parentNode;f(t,"data-nav")&&gn(ft=[].indexOf.call(st,t),e)}},keydown:function(e){var n=$.activeElement;if(f(n,"data-nav")){var i=(e=e||q.event).keyCode,r=[].indexOf.call(st,n),o=ct.length,a=ct.indexOf(r);switch(t.navContainer&&(o=M,a=r),i){case G.LEFT:case G.PAGEUP:a>0&&On(st[s(a-1)]);break;case G.UP:case G.HOME:a>0&&On(st[s(0)]);break;case G.RIGHT:case G.PAGEDOWN:a<o-1&&On(st[s(a+1)]);break;case G.DOWN:case G.END:a<o-1&&On(st[s(o-1)]);break;case G.ENTER:case G.SPACE:ft=r,gn(r,e)}}function s(e){return t.navContainer?e:ct[e]}}},je={mouseover:function(){vt&&(Sn(),gt=!0)},mouseout:function(){gt&&(xn(),gt=!1)}},$e={visibilitychange:function(){$.hidden?vt&&(Sn(),bt=!0):bt&&(xn(),bt=!1)}},qe={keydown:function(e){switch((e=e||q.event).keyCode){case G.LEFT:bn(e,-1);break;case G.RIGHT:bn(e,1)}}},Ge={touchstart:In,touchmove:An,touchend:Mn,touchcancel:Mn},Ve={mousedown:In,mousemove:An,mouseup:Mn,mouseleave:Mn},He=zt("controls"),Xe=zt("nav"),Ke=t.navAsThumbnails,Je=zt("autoplay"),Ue=zt("touch"),Ye=zt("mouseDrag"),Ze="tns-slide-active";if(He)var et,tt,nt,it,rt=jt("controls"),ot=jt("controlsText"),at=t.controlsContainer;if(Xe)var st,lt=jt("nav"),ut=t.navContainer,ct=[],dt=ct,ft=-1,ht=Oe%M,pt=ht,mt="tns-nav-active";if(Je)var yt,vt,gt,bt,xt=jt("autoplay"),St=jt("autoplayTimeout"),wt="forward"===t.autoplayDirection?1:-1,kt=jt("autoplayText"),Et=jt("autoplayHoverPause"),Tt=t.autoplayButton,Ot=jt("autoplayResetOnVisibility"),Pt=["<span class='tns-visually-hidden'>"," animation</span>"];if(Ue)var Lt,Ct,It,At=jt("touch"),Mt=null,Nt=null,Dt=0;if(Ye)var Rt=jt("mouseDrag"),Bt=!1;We&&(rt=lt=At=Rt=de=xt=Et=Ot=!1),K&&(ke=K,Ee="translate",Ee+=O?"X(":"Y(",Te=")"),function(){P.appendChild(L),I.insertBefore(P,C),L.appendChild(C),k=L.clientWidth;var e="tns-outer",n="tns-inner",i=zt("gutter");if(h?O&&(zt("edgePadding")||i&&!t.fixedWidth)?e+=" tns-ovh":n+=" tns-ovh":i&&(e+=" tns-ovh"),P.className=e,L.className=n,L.id=Re+"-iw",me&&(L.className+=" tns-ah",L.style[J]=fe/1e3+"s"),""===C.id&&(C.id=Re),De+=H?" tns-subpixel":" tns-no-subpixel",De+=V?" tns-calc":" tns-no-calc",h&&(De+=" tns-"+t.axis),C.className+=De,h&&ee){var r={};r[ee]=vn,E(C,r)}e=n=null;for(var o=0;o<M;o++)(T=A[o]).id||(T.id=Re+"-item"+o),c(T,"tns-item"),!h&&w&&c(T,w),p(T,{"aria-hidden":"true",tabindex:"-1"});if(pe||ue){for(var a=$.createDocumentFragment(),u=$.createDocumentFragment(),f=be;f--;){var v=f%M,g=A[v].cloneNode(!0);if(m(g,"id"),u.insertBefore(g,u.firstChild),h){var x=A[M-1-v].cloneNode(!0);m(x,"id"),a.appendChild(x)}}C.insertBefore(a,C.firstChild),C.appendChild(u),A=C.children}for(var S=Oe;S<Oe+Math.min(M,oe);S++){var T;p(T=A[S],{"aria-hidden":"false"}),m(T,["tabindex"]),c(T,Ze),h||(T.style.left=100*(S-Oe)/oe+"%",c(T,b),d(T,w))}if(h&&O&&(H?(s(ye,"#"+Re+" > .tns-item","font-size:"+q.getComputedStyle(A[0]).fontSize+";",l(ye)),s(ye,"#"+Re,"font-size:0;",l(ye))):[].forEach.call(A,function(e,t){var n;e.style.marginLeft=(n=t,V?V+"("+100*n+"% / "+xe+")":100*n/xe+"%")})),X){var N=$t(t.edgePadding,t.gutter,t.fixedWidth);s(ye,"#"+Re+"-iw",N,l(ye)),h&&O&&(N="width:"+qt(t.fixedWidth,t.gutter,t.items),s(ye,"#"+Re,N,l(ye))),(O||t.gutter)&&(N=Gt(t.fixedWidth,t.gutter,t.items)+Vt(t.gutter),s(ye,"#"+Re+" > .tns-item",N,l(ye)))}else L.style.cssText=$t(ue,le,ce),h&&O&&(C.style.width=qt(ce,le,oe)),(O||le)&&(N=Gt(ce,le,oe)+Vt(le),s(ye,"#"+Re+" > .tns-item",N,l(ye)));if(O||Be||(rn(),Nn()),D&&X&&B.forEach(function(e){var t,n=D[e],i="",r="",o="",a=jt("items",e),s=jt("fixedWidth",e),l=jt("edgePadding",e),u=jt("gutter",e);("edgePadding"in n||"gutter"in n)&&(i="#"+Re+"-iw{"+$t(l,u,s)+"}"),h&&O&&("fixedWidth"in n||"gutter"in n||"items"in n)&&(r="#"+Re+"{width:"+qt(s,u,a)+"}"),("fixedWidth"in n||zt("fixedWidth")&&"gutter"in n||!h&&"items"in n)&&(o+=Gt(s,u,a)),"gutter"in n&&(o+=Vt(u)),o.length>0&&(o="#"+Re+" > .tns-item{"+o+"}"),(t=i+r+o).length>0&&ye.insertRule("@media (min-width: "+e/16+"em) {"+t+"}",ye.cssRules.length)}),h&&!Be&&fn(),navigator.msMaxTouchPoints&&(c(P,"ms-touch"),E(P,{scroll:Pn}),on()),Xe){var R=h?be:0;if(ut)p(ut,{"aria-label":"Carousel Pagination"}),st=ut.children,[].forEach.call(st,function(e,t){p(e,{"data-nav":t,tabindex:"-1","aria-selected":"false","aria-controls":A[R+t].id})});else{var Q="";for(S=0;S<M;S++)Q+='<button data-nav="'+S+'" tabindex="-1" aria-selected="false" aria-controls="'+A[R+S].id+'" hidden type="button"></button>';Q='<div class="tns-nav" aria-label="Carousel Pagination">'+Q+"</div>",P.insertAdjacentHTML("afterbegin",Q),ut=P.querySelector(".tns-nav"),st=ut.children}if(Dn(),J){var W=J.substring(0,J.length-18).toLowerCase();N="transition: all "+fe/1e3+"s",W&&(N="-"+W+"-"+N),s(ye,"[aria-controls^="+Re+"-item]",N,l(ye))}p(st[ht],{tabindex:"0","aria-selected":"true"}),c(st[ht],mt),E(ut,ze),lt||y(ut)}if(Je){var _=xt?"stop":"start";Tt?p(Tt,{"data-action":_}):t.autoplayButtonOutput&&(L.insertAdjacentHTML("beforebegin",'<button data-action="'+_+'" type="button">'+Pt[0]+_+Pt[1]+kt[0]+"</button>"),Tt=P.querySelector("[data-action]")),Tt&&E(Tt,{click:Tn}),xt?(kn(),Et&&E(C,je),Ot&&E(C,$e)):Tt&&y(Tt)}He&&(at?(et=at.children[0],tt=at.children[1],p(at,{"aria-label":"Carousel Navigation",tabindex:"0"}),p(et,{"data-controls":"prev"}),p(tt,{"data-controls":"next"}),p(at.children,{"aria-controls":Re,tabindex:"-1"})):(P.insertAdjacentHTML("afterbegin",'<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="'+Re+'" type="button">'+ot[0]+'</button><button data-controls="next" tabindex="-1" aria-controls="'+Re+'" type="button">'+ot[1]+"</button></div>"),at=P.querySelector(".tns-controls"),et=at.children[0],tt=at.children[1]),nt=an(et),it=an(tt),un(),E(at,Fe),rt||y(at)),At&&E(C,Ge),Rt&&E(C,Ve),de&&E($,qe),"inner"===se?Me.on("outerResized",function(){Xt(),Me.emit("innerLoaded",Rn())}):(E(q,{resize:Ht}),"outer"===se&&Me.on("innerLoaded",en)),Zt(),en(),Jt(),Ut(),Me.on("indexChanged",tn),"function"==typeof Ae&&Ae(Rn()),"inner"===se&&Me.emit("innerLoaded",Rn()),Be&&Yt(!0)}();var Qt=pe?function(){var e=Le+ae,t=Ce-ae;if(ue)e+=1,t-=1;else if(ce){var n=le||0;N%(ce+n)>n&&(t-=1)}if(Oe>t)for(;Oe>=e+M;)Oe-=M;else if(Oe<e)for(;Oe<=t-M;)Oe+=M}:function(){Oe=Math.max(Le,Math.min(Ce,Oe))},Wt=h?function(e,t){var n,i,r,o,a,s,l,u,c,d,f;t||(t=dn()),Se&&Oe===Ce&&(t=-((ce+le)*xe-k)+"px"),J||!e?(fn(t),e&&g(C)||vn()):(n=C,i=ke,r=Ee,o=Te,a=t,s=fe,l=vn,u=Math.min(s,10),c=a.indexOf("%")>=0?"%":"px",a=a.replace(c,""),d=Number(n.style[i].replace(r,"").replace(o,"").replace(c,"")),f=(a-d)/s*u,setTimeout(function e(){s-=u,d+=f,n.style[i]=r+d+c+o,s>0?setTimeout(e,u):l()},u)),O||Nn()}:function(e){ge=[];var t={};t[ee]=t[te]=vn,T(A[Pe],t),E(A[Oe],t),hn(Pe,b,x,!0),hn(Oe,w,b),ee&&te&&e||vn()};return{getInfo:Rn,events:Me,goTo:gn,destroy:function(){if(ye.disabled=!0,pe)for(var e=be;e--;)h&&A[0].remove(),A[A.length-1].remove();var n=["tns-item",Ze];h||(n=n.concat("tns-normal",b));for(var i=M;i--;){var r=A[i];r.id.indexOf(Re+"-item")>=0&&(r.id=""),n.forEach(function(e){d(r,e)})}if(m(A,["style","aria-hidden","tabindex"]),A=Re=M=xe=be=null,rt&&(T(at,Fe),t.controlsContainer&&(m(at,["aria-label","tabindex"]),m(at.children,["aria-controls","aria-disabled","tabindex"])),at=et=tt=null),lt&&(T(ut,ze),t.navContainer&&(m(ut,["aria-label"]),m(st,["aria-selected","aria-controls","tabindex"])),ut=st=null),xt&&(clearInterval(yt),Tt&&T(Tt,{click:Tn}),T(C,je),T(C,$e),t.autoplayButton&&m(Tt,["data-action"])),C.id=Ne||"",C.className=C.className.replace(De,""),C.style="",h&&ee){var o={};o[ee]=vn,T(C,o)}T(C,Ge),T(C,Ve),I.insertBefore(C,P),P.remove(),P=L=C=null,T($,qe),T(q,{resize:Ht})}}}n&&console.warn("Slides less than 2.")}else n&&console.warn("Can't find container element.");var _t;function Ft(){return q.innerWidth||$.documentElement.clientWidth||$.body.clientWidth}function zt(e){var n=t[e];return!n&&B&&R.indexOf(e)>=0&&B.forEach(function(t){D[t][e]&&(n=!0)}),n}function jt(e,n){n=n||W;var i,r={slideBy:"page",edgePadding:!1,autoHeight:!0};if(!h&&e in r)i=r[e];else if("items"===e&&jt("fixedWidth"))i=Math.floor(N/(jt("fixedWidth")+jt("gutter")));else if("autoHeight"===e&&"outer"===se)i=!0;else if(i=t[e],B&&R.indexOf(e)>=0)for(var o=0,a=B.length;o<a;o++){var s=B[o];if(!(n>=s))break;e in D[s]&&(i=D[s][e])}return"slideBy"===e&&"page"===i&&(i=jt("items")),i}function $t(e,t,n){var i="";if(e){var r=e;t&&(r+=t),i=n?"margin: 0px "+(N%(n+t)+t)/2+"px":O?"margin: 0 "+e+"px 0 "+r+"px;":"padding: "+r+"px 0 "+e+"px 0;"}else if(t&&!n){var o="-"+t+"px";i="margin: 0 "+(O?o+" 0 0":"0 "+o+" 0")+";"}return i}function qt(e,t,n){return e?(e+t)*xe+"px":V?V+"("+100*xe+"% / "+n+")":100*xe/n+"%"}function Gt(e,t,n){var i="";if(O){if(i="width:",e)i+=e+t+"px";else{var r=h?xe:n;i+=V?V+"(100% / "+r+")":100/r+"%"}i+=_e+";"}return i}function Vt(e){var t="";return!1!==e&&(t=(O?"padding-":"margin-")+(O?"right":"bottom")+": "+e+"px;"),t}function Ht(e){e=e||q.event,clearTimeout(z),z=setTimeout(function(){var t=Ft();W!==t&&(W=t,Xt(),"outer"===se&&Me.emit("outerResized",Rn(e)))},100)}function Xt(){var e=Q,t=Oe,n=oe,i=We;if(N=P.clientWidth,k=L.clientWidth,B&&Kt(),e!==Q||ce){var r=de,o=me,a=ce,u=ue,c=le,d=Be;if(oe=jt("items"),ae=jt("slideBy"),Be=jt("disable"),We=!!Be||!!Qe&&M<=oe,oe!==n&&(Ce=xe-oe,Qt()),Be!==d&&Yt(Be),We!==i&&(We&&(Oe=h?be:0),Jt()),e!==Q&&(fe=jt("speed"),ue=jt("edgePadding"),le=jt("gutter"),ce=jt("fixedWidth"),Be||ce===a||fn(),(me=jt("autoHeight"))!==o&&(me||(L.style.height=""))),(de=!We&&jt("arrowKeys"))!==r&&(de?E($,qe):T($,qe)),He){var f=rt,p=ot;rt=!We&&jt("controls"),ot=jt("controlsText"),rt!==f&&(rt?v(at):y(at)),ot!==p&&(et.innerHTML=ot[0],tt.innerHTML=ot[1])}if(Xe){var m=lt;(lt=!We&&jt("nav"))!==m&&(lt?(v(ut),Dn()):y(ut))}if(Ue){var g=At;(At=!We&&jt("touch"))!==g&&h&&(At?E(C,Ge):T(C,Ge))}if(Ye){var b=Rt;(Rt=!We&&jt("mouseDrag"))!==b&&h&&(Rt?E(C,Ve):T(C,Ve))}if(Je){var x=xt,S=Et,w=Ot,I=kt;if(We?xt=Et=Ot=!1:(xt=jt("autoplay"))?(Et=jt("autoplayHoverPause"),Ot=jt("autoplayResetOnVisibility")):Et=Ot=!1,kt=jt("autoplayText"),St=jt("autoplayTimeout"),xt!==x&&(xt?(Tt&&v(Tt),vt||kn()):(Tt&&y(Tt),vt&&En())),Et!==S&&(Et?E(C,je):T(C,je)),Ot!==w&&(Ot?E($,$e):T($,$e)),Tt&&kt!==I){var A=xt?1:0,D=Tt.innerHTML,R=D.length-I[A].length;D.substring(R)===I[A]&&(Tt.innerHTML=D.substring(0,R)+kt[A])}}if(!X){if(We||ue===u&&le===c||(L.style.cssText=$t(ue,le,ce)),h&&O&&(ce!==a||le!==c||oe!==n)&&(C.style.width=qt(ce,le,oe)),O&&(oe!==n||le!==c||ce!=a)){var W=Gt(ce,le,oe)+Vt(le);ye.removeRule(l(ye)-1),s(ye,"#"+Re+" > .tns-item",W,l(ye))}ce||Oe!==t||pn(0)}Oe!==t&&(Me.emit("indexChanged",Rn()),pn(0),Pe=Oe),oe!==n&&(tn(),en(),navigator.msMaxTouchPoints&&on())}O||Be||(rn(),Nn(),fn()),Ut(!0),en()}function Kt(){Q=0,B.forEach(function(e,t){W>=e&&(Q=t+1)})}function Jt(){var e="tns-transparent",t="0px"===L.style.margin;if(We){if(!t&&(ue&&(L.style.margin="0px"),be))for(var n=be;n--;)c(A[n],e),c(A[xe-n-1],e)}else if(t&&(ue&&!ce&&X&&(L.style.margin=""),be))for(n=be;n--;)d(A[n],e),d(A[xe-n-1],e)}function Ut(e){ce&&ue&&(We||N<=ce+le?"0px"!==L.style.margin&&(L.style.margin="0px"):e&&(L.style.cssText=$t(ue,le,ce)))}function Yt(e){var t=A.length;if(e){if(ye.disabled=!0,C.className=C.className.replace(De.substring(1),""),C.style="",pe)for(var n=be;n--;)h&&y(A[n]),y(A[t-n-1]);if(O&&h||(L.style=""),!h)for(var i=Oe;i<Oe+M;i++)(r=A[i]).style="",d(r,b),d(r,w)}else{if(ye.disabled=!1,C.className+=De,O||rn(),fn(),pe)for(n=be;n--;)h&&v(A[n]),v(A[t-n-1]);if(!h)for(i=Oe;i<Oe+M;i++){var r=A[i],o=i<Oe+oe?b:w;r.style.left=100*(i-Oe)/oe+"%",c(r,o)}}}function Zt(){if(ve&&!Be){var e=Oe,t=Oe+oe;for(ue&&(e-=1,t+=1);e<t;e++)[].forEach.call(A[e].querySelectorAll(".tns-lazy-img"),function(e){var t,n={};n[ee]=function(e){e.stopPropagation()},E(e,n),u(e,"loaded")||(e.src=(t="data-src",e.getAttribute(t)),c(e,"loaded"))})}}function en(){if(me&&!Be){for(var e=[],t=Oe;t<Oe+oe;t++)[].forEach.call(A[t].querySelectorAll("img"),function(t){e.push(t)});0===e.length?nn():function e(t){t.forEach(function(e,n){var i;("boolean"==typeof(i=e).complete?i.complete:"number"==typeof i.naturalWidth?0!==i.naturalWidth:void 0)&&t.splice(n,1)}),0===t.length?nn():setTimeout(function(){e(t)},16)}(e)}}function tn(){Zt(),function(){for(var e=xe;e--;){var t=A[e];e>=Oe&&e<Oe+oe?f(t,"tabindex")&&(p(t,{"aria-hidden":"false"}),m(t,["tabindex"]),c(t,Ze)):(f(t,"tabindex")||p(t,{"aria-hidden":"true",tabindex:"-1"}),u(t,Ze)&&d(t,Ze))}}(),un(),Dn(),function(){if(lt&&(ht=-1!==ft?ft:Oe%M,ft=-1,ht!==pt)){var e=st[pt],t=st[ht];p(e,{tabindex:"-1","aria-selected":"false"}),p(t,{tabindex:"0","aria-selected":"true"}),d(e,mt),c(t,mt)}}()}function nn(){for(var e,t=[],n=Oe;n<Oe+oe;n++)t.push(A[n].offsetHeight);e=Math.max.apply(null,t),L.style.height!==e&&(J&&cn(fe),L.style.height=e+"px")}function rn(){F=[0];for(var e,t=A[0].getBoundingClientRect().top,n=1;n<xe;n++)e=A[n].getBoundingClientRect().top,F.push(e-t)}function on(){P.style.msScrollSnapPointsX="snapInterval(0%, "+100/oe+"%)"}function an(e){return"button"===e.nodeName.toLowerCase()}function sn(e){return"true"===e.getAttribute("aria-disabled")}function ln(e,t,n){e?t.disabled=n:t.setAttribute("aria-disabled",n.toString())}function un(){if(rt&&!pe){var e=nt?et.disabled:sn(et),t=it?tt.disabled:sn(tt),n=Oe===Le,i=!he&&Oe===Ce;n&&!e&&ln(nt,et,!0),!n&&e&&ln(nt,et,!1),i&&!t&&ln(it,tt,!0),!i&&t&&ln(it,tt,!1)}}function cn(e,t){e=e?e/1e3+"s":"",(t=t||C).style[J]=e,h||(t.style[Y]=e),O||(L.style[J]=e)}function dn(){return O?ce?-(ce+le)*Oe+"px":100*-Oe/(K?xe:oe)+"%":-F[Oe]+"px"}function fn(e){e||(e=dn()),C.style[ke]=Ee+e+Te}function hn(e,t,n,i){for(var r=e,o=e+oe;r<o;r++){var a=A[r];i||(a.style.left=100*(r-Oe)/oe+"%"),J&&cn(fe,a),S&&U&&(a.style[U]=a.style[Z]=S*(r-e)/1e3+"s"),d(a,t),c(a,n),i&&ge.push(a)}}function pn(e,t){isNaN(e)&&(e=fe),vt&&!g(C)&&(e=0),J&&cn(e),Wt(e,t)}function mn(e,t){we&&Qt(),(Oe!==Pe||t)&&(Me.emit("indexChanged",Rn()),Me.emit("transitionStart",Rn()),vt&&e&&["click","keydown"].indexOf(e.type)>=0&&En(),Ie=!0,pn())}function yn(e){return e.toLowerCase().replace(/-/g,"")}function vn(e){if(h||Ie){if(Me.emit("transitionEnd",Rn(e)),!h&&ge.length>0)for(var t=0;t<oe;t++){var n=ge[t];n.style.left="",J&&cn(0,n),S&&U&&(n.style[U]=n.style[Z]=""),d(n,x),c(n,w)}if(!e||!h&&e.target.parentNode===C||e.target===C&&yn(e.propertyName)===yn(ke)){if(!we){var i=Oe;Qt(),Oe!==i&&(Me.emit("indexChanged",Rn()),J&&cn(0),fn())}en(),"inner"===se&&Me.emit("innerLoaded",Rn()),Ie=!1,pt=ht,Pe=Oe}}}function gn(e,t){if(!We)if("prev"===e)bn(t,-1);else if("next"===e)bn(t,1);else if(!Ie){var n=Oe%M,i=0;if(n<0&&(n+=M),"first"===e)i=-n;else if("last"===e)i=M-oe-n;else if("number"!=typeof e&&(e=parseInt(e)),!isNaN(e)){var r=e%M;r<0&&(r+=M),i=r-n}(Oe+=i)%M!=Pe%M&&mn(t)}}function bn(e,t){if(!Ie){var n;if(!t){for(var i=(e=e||q.event).target||e.srcElement;i!==at&&[et,tt].indexOf(i)<0;)i=i.parentNode;var r=[et,tt].indexOf(i);r>=0&&(n=!0,t=0===r?-1:1)}if(-1===t)Oe-=ae;else if(1===t){if(he&&Oe===Ce)return void gn(0,e);Oe+=ae}mn(n||e&&"keydown"===e.type?e:null)}}function xn(){yt=setInterval(function(){bn(null,wt)},St),vt=!0}function Sn(){clearInterval(yt),vt=!1}function wn(e,t){p(Tt,{"data-action":e}),Tt.innerHTML=Pt[0]+e+Pt[1]+t}function kn(){xn(),Tt&&wn("stop",kt[1])}function En(){Sn(),Tt&&wn("start",kt[0])}function Tn(){vt?En():kn()}function On(e){e.focus()}function Pn(){pn(0,C.scrollLeft()),Pe=Oe}function Ln(e){return e.type.indexOf("touch")>=0}function Cn(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function In(e){var t;Dt=0,j=!1,Mt=Nt=null,Ie||(Ln(e=e||q.event)?(t=e.changedTouches[0],Me.emit("touchStart",Rn(e))):(t=e,Cn(e),Me.emit("dragStart",Rn(e))),Mt=parseInt(t.clientX),Nt=parseInt(t.clientY),Lt=parseFloat(C.style[ke].replace(Ee,"").replace(Te,"")))}function An(e){var n,i,r,o,a,s,l;if(!Ie&&null!==Mt&&(Ln(e=e||q.event)?n=e.changedTouches[0]:(n=e,Cn(e)),Ct=parseInt(n.clientX)-Mt,It=parseInt(n.clientY)-Nt,0===Dt&&(s=It,l=Ct,i=Math.atan2(s,l)*(180/Math.PI),r=15,o=!1,(a=Math.abs(90-Math.abs(i)))>=90-r?o="horizontal":a<=r&&(o="vertical"),Dt=o===t.axis),Dt)){Ln(e)?Me.emit("touchMove",Rn(e)):(Bt||(Bt=!0),Me.emit("dragMove",Rn(e))),j||(j=!0);var u=Lt;O?ce?(u+=Ct,u+="px"):(u+=K?Ct*oe*100/(k*xe):100*Ct/k,u+="%"):(u+=It,u+="px"),K&&cn(0),C.style[ke]=Ee+u+Te}}function Mn(e){if(!Ie&&j){var t;Ln(e=e||q.event)?(t=e.changedTouches[0],Me.emit("touchEnd",Rn(e))):(t=e,Me.emit("dragEnd",Rn(e))),Ct=parseInt(t.clientX)-Mt,It=parseInt(t.clientY)-Nt;var n=Boolean(O?Ct:It);if(Dt=0,j=!1,Mt=Nt=null,O){var i=-Ct*oe/k;i=Ct>0?Math.floor(i):Math.ceil(i),Oe+=i}else{var r=-(Lt+It);if(r<=0)Oe=Le;else if(r>=F[F.length-1])Oe=Ce;else{var o=0;do{o++,Oe=It<0?o+1:o}while(o<xe&&r>=F[o+1])}}if(mn(e,n),Bt){Bt=!1;var a=(s=e).target||s.srcElement;E(a,{click:function e(t){Cn(t),T(a,{click:e})}})}}var s}function Nn(){L.style.height=F[Oe+oe]-F[Oe]+"px"}function Dn(){lt&&!Ke&&(function(){ct=[];for(var e=Oe%M%oe;e<M;)!pe&&e+oe>M&&(e=M-oe),ct.push(e),e+=oe;(pe&&ct.length*oe<M||!pe&&ct[0]>0)&&ct.unshift(0)}(),ct!==dt&&([].forEach.call(st,function(e,t){ct.indexOf(t)<0?y(e):v(e)}),dt=ct))}function Rn(e){return{container:C,slideItems:A,navContainer:ut,navItems:st,controlsContainer:at,hasControls:He,prevButton:et,nextButton:tt,items:oe,slideBy:ae,cloneCount:be,slideCount:M,slideCountNew:xe,index:Oe,indexCached:Pe,navCurrentIndex:ht,navCurrentIndexCached:pt,visibleNavIndexes:ct,visibleNavIndexesCached:dt,event:e||{}}}}}();_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};(function(){"use strict";var e={function:!0,object:!0},t=e["undefined"==typeof window?"undefined":_typeof(window)]&&window||this,n=e["undefined"==typeof exports?"undefined":_typeof(exports)]&&exports,i=e["undefined"==typeof module?"undefined":_typeof(module)]&&module&&!module.nodeType&&module,r=n&&i&&"object"==("undefined"==typeof global?"undefined":_typeof(global))&&global;!r||r.global!==r&&r.window!==r&&r.self!==r||(t=r);var o=Math.pow(2,53)-1,a=/\bOpera/,s=Object.prototype,l=s.hasOwnProperty,u=s.toString;function c(e){return(e=String(e)).charAt(0).toUpperCase()+e.slice(1)}function d(e){return e=y(e),/^(?:webOS|i(?:OS|P))/.test(e)?e:c(e)}function f(e,t){for(var n in e)l.call(e,n)&&t(e[n],n,e)}function h(e){return null==e?c(e):u.call(e).slice(8,-1)}function p(e){return String(e).replace(/([ -])(?!$)/g,"$1?")}function m(e,t){var n=null;return function(e,t){var n=-1,i=e?e.length:0;if("number"==typeof i&&i>-1&&i<=o)for(;++n<i;)t(e[n],n,e);else f(e,t)}(e,function(i,r){n=t(n,i,r,e)}),n}function y(e){return String(e).replace(/^ +| +$/g,"")}var v=function e(n){var i=t,r=n&&"object"==(void 0===n?"undefined":_typeof(n))&&"String"!=h(n);r&&(i=n,n=null);var o=i.navigator||{},s=o.userAgent||"";n||(n=s);var l,c,v,g,b,x=r?!!o.likeChrome:/\bChrome\b/.test(n)&&!/internal|\n/i.test(u.toString()),S=r?"Object":"ScriptBridgingProxyObject",w=r?"Object":"Environment",k=r&&i.java?"JavaPackage":h(i.java),E=r?"Object":"RuntimeObject",T=/\bJava/.test(k)&&i.java,O=T&&h(i.environment)==w,P=T?"a":"α",L=T?"b":"β",C=i.document||{},I=i.operamini||i.opera,A=a.test(A=r&&I?I["[[Class]]"]:h(I))?A:I=null,M=n,N=[],D=null,R=n==s,B=R&&I&&"function"==typeof I.version&&I.version(),Q=m([{label:"EdgeHTML",pattern:"Edge"},"Trident",{label:"WebKit",pattern:"AppleWebKit"},"iCab","Presto","NetFront","Tasman","KHTML","Gecko"],function(e,t){return e||RegExp("\\b"+(t.pattern||p(t))+"\\b","i").exec(n)&&(t.label||t)}),W=m(["Adobe AIR","Arora","Avant Browser","Breach","Camino","Electron","Epiphany","Fennec","Flock","Galeon","GreenBrowser","iCab","Iceweasel","K-Meleon","Konqueror","Lunascape","Maxthon",{label:"Microsoft Edge",pattern:"Edge"},"Midori","Nook Browser","PaleMoon","PhantomJS","Raven","Rekonq","RockMelt",{label:"Samsung Internet",pattern:"SamsungBrowser"},"SeaMonkey",{label:"Silk",pattern:"(?:Cloud9|Silk-Accelerated)"},"Sleipnir","SlimBrowser",{label:"SRWare Iron",pattern:"Iron"},"Sunrise","Swiftfox","Waterfox","WebPositive","Opera Mini",{label:"Opera Mini",pattern:"OPiOS"},"Opera",{label:"Opera",pattern:"OPR"},"Chrome",{label:"Chrome Mobile",pattern:"(?:CriOS|CrMo)"},{label:"Firefox",pattern:"(?:Firefox|Minefield)"},{label:"Firefox for iOS",pattern:"FxiOS"},{label:"IE",pattern:"IEMobile"},{label:"IE",pattern:"MSIE"},"Safari"],function(e,t){return e||RegExp("\\b"+(t.pattern||p(t))+"\\b","i").exec(n)&&(t.label||t)}),_=j([{label:"BlackBerry",pattern:"BB10"},"BlackBerry",{label:"Galaxy S",pattern:"GT-I9000"},{label:"Galaxy S2",pattern:"GT-I9100"},{label:"Galaxy S3",pattern:"GT-I9300"},{label:"Galaxy S4",pattern:"GT-I9500"},{label:"Galaxy S5",pattern:"SM-G900"},{label:"Galaxy S6",pattern:"SM-G920"},{label:"Galaxy S6 Edge",pattern:"SM-G925"},{label:"Galaxy S7",pattern:"SM-G930"},{label:"Galaxy S7 Edge",pattern:"SM-G935"},"Google TV","Lumia","iPad","iPod","iPhone","Kindle",{label:"Kindle Fire",pattern:"(?:Cloud9|Silk-Accelerated)"},"Nexus","Nook","PlayBook","PlayStation Vita","PlayStation","TouchPad","Transformer",{label:"Wii U",pattern:"WiiU"},"Wii","Xbox One",{label:"Xbox 360",pattern:"Xbox"},"Xoom"]),F=m({Apple:{iPad:1,iPhone:1,iPod:1},Archos:{},Amazon:{Kindle:1,"Kindle Fire":1},Asus:{Transformer:1},"Barnes & Noble":{Nook:1},BlackBerry:{PlayBook:1},Google:{"Google TV":1,Nexus:1},HP:{TouchPad:1},HTC:{},LG:{},Microsoft:{Xbox:1,"Xbox One":1},Motorola:{Xoom:1},Nintendo:{"Wii U":1,Wii:1},Nokia:{Lumia:1},Samsung:{"Galaxy S":1,"Galaxy S2":1,"Galaxy S3":1,"Galaxy S4":1},Sony:{PlayStation:1,"PlayStation Vita":1}},function(e,t,i){return e||(t[_]||t[/^[a-z]+(?: +[a-z]+\b)*/i.exec(_)]||RegExp("\\b"+p(i)+"(?:\\b|\\w*\\d)","i").exec(n))&&i}),z=m(["Windows Phone","Android","CentOS",{label:"Chrome OS",pattern:"CrOS"},"Debian","Fedora","FreeBSD","Gentoo","Haiku","Kubuntu","Linux Mint","OpenBSD","Red Hat","SuSE","Ubuntu","Xubuntu","Cygwin","Symbian OS","hpwOS","webOS ","webOS","Tablet OS","Tizen","Linux","Mac OS X","Macintosh","Mac","Windows 98;","Windows "],function(e,t){var i,r,o,a,s=t.pattern||p(t);return!e&&(e=RegExp("\\b"+s+"(?:/[\\d.]+|[ \\w.]*)","i").exec(n))&&(i=e,r=s,o=t.label||t,a={"10.0":"10",6.4:"10 Technical Preview",6.3:"8.1",6.2:"8",6.1:"Server 2008 R2 / 7","6.0":"Server 2008 / Vista",5.2:"Server 2003 / XP 64-bit",5.1:"XP",5.01:"2000 SP1","5.0":"2000","4.0":"NT","4.90":"ME"},r&&o&&/^Win/i.test(i)&&!/^Windows Phone /i.test(i)&&(a=a[/[\d.]+$/.exec(i)])&&(i="Windows "+a),i=String(i),r&&o&&(i=i.replace(RegExp(r,"i"),o)),e=i=d(i.replace(/ ce$/i," CE").replace(/\bhpw/i,"web").replace(/\bMacintosh\b/,"Mac OS").replace(/_PowerPC\b/i," OS").replace(/\b(OS X) [^ \d]+/i,"$1").replace(/\bMac (OS X)\b/,"$1").replace(/\/(\d)/," $1").replace(/_/g,".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i,"").replace(/\bx86\.64\b/gi,"x86_64").replace(/\b(Windows Phone) OS\b/,"$1").replace(/\b(Chrome OS \w+) [\d.]+\b/,"$1").split(" on ")[0])),e});function j(e){return m(e,function(e,t){var i=t.pattern||p(t);return!e&&(e=RegExp("\\b"+i+" *\\d+[.\\w_]*","i").exec(n)||RegExp("\\b"+i+" *\\w+-[\\w]*","i").exec(n)||RegExp("\\b"+i+"(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)","i").exec(n))&&((e=String(t.label&&!RegExp(i,"i").test(t.label)?t.label:e).split("/"))[1]&&!/[\d.]+/.test(e[0])&&(e[0]+=" "+e[1]),t=t.label||t,e=d(e[0].replace(RegExp(i,"i"),t).replace(RegExp("; *(?:"+t+"[_-])?","i")," ").replace(RegExp("("+t+")[-_.]?(\\w)","i"),"$1 $2"))),e})}if(Q&&(Q=[Q]),F&&!_&&(_=j([F])),(l=/\bGoogle TV\b/.exec(_))&&(_=l[0]),/\bSimulator\b/i.test(n)&&(_=(_?_+" ":"")+"Simulator"),"Opera Mini"==W&&/\bOPiOS\b/.test(n)&&N.push("running in Turbo/Uncompressed mode"),"IE"==W&&/\blike iPhone OS\b/.test(n)?(F=(l=e(n.replace(/like iPhone OS/,""))).manufacturer,_=l.product):/^iP/.test(_)?(W||(W="Safari"),z="iOS"+((l=/ OS ([\d_]+)/i.exec(n))?" "+l[1].replace(/_/g,"."):"")):"Konqueror"!=W||/buntu/i.test(z)?F&&"Google"!=F&&(/Chrome/.test(W)&&!/\bMobile Safari\b/i.test(n)||/\bVita\b/.test(_))||/\bAndroid\b/.test(z)&&/^Chrome/.test(W)&&/\bVersion\//i.test(n)?(W="Android Browser",z=/\bAndroid\b/.test(z)?z:"Android"):"Silk"==W?(/\bMobi/i.test(n)||(z="Android",N.unshift("desktop mode")),/Accelerated *= *true/i.test(n)&&N.unshift("accelerated")):"PaleMoon"==W&&(l=/\bFirefox\/([\d.]+)\b/.exec(n))?N.push("identifying as Firefox "+l[1]):"Firefox"==W&&(l=/\b(Mobile|Tablet|TV)\b/i.exec(n))?(z||(z="Firefox OS"),_||(_=l[1])):!W||(l=!/\bMinefield\b/i.test(n)&&/\b(?:Firefox|Safari)\b/.exec(W))?(W&&!_&&/[\/,]|^[^(]+?\)/.test(n.slice(n.indexOf(l+"/")+8))&&(W=null),(l=_||F||z)&&(_||F||/\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(z))&&(W=/[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(z)?z:l)+" Browser")):"Electron"==W&&(l=(/\bChrome\/([\d.]+)\b/.exec(n)||0)[1])&&N.push("Chromium "+l):z="Kubuntu",B||(B=m(["(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))","Version",p(W),"(?:Firefox|Minefield|NetFront)"],function(e,t){return e||(RegExp(t+"(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)","i").exec(n)||0)[1]||null})),(l=("iCab"==Q&&parseFloat(B)>3?"WebKit":/\bOpera\b/.test(W)&&(/\bOPR\b/.test(n)?"Blink":"Presto"))||/\b(?:Midori|Nook|Safari)\b/i.test(n)&&!/^(?:Trident|EdgeHTML)$/.test(Q)&&"WebKit"||!Q&&/\bMSIE\b/i.test(n)&&("Mac OS"==z?"Tasman":"Trident")||"WebKit"==Q&&/\bPlayStation\b(?! Vita\b)/i.test(W)&&"NetFront")&&(Q=[l]),"IE"==W&&(l=(/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(n)||0)[1])?(W+=" Mobile",z="Windows Phone "+(/\+$/.test(l)?l:l+".x"),N.unshift("desktop mode")):/\bWPDesktop\b/i.test(n)?(W="IE Mobile",z="Windows Phone 8.x",N.unshift("desktop mode"),B||(B=(/\brv:([\d.]+)/.exec(n)||0)[1])):"IE"!=W&&"Trident"==Q&&(l=/\brv:([\d.]+)/.exec(n))&&(W&&N.push("identifying as "+W+(B?" "+B:"")),W="IE",B=l[1]),R){if(g="global",b=null!=(v=i)?_typeof(v[g]):"number",/^(?:boolean|number|string|undefined)$/.test(b)||"object"==b&&!v[g])h(l=i.runtime)==S?(W="Adobe AIR",z=l.flash.system.Capabilities.os):h(l=i.phantom)==E?(W="PhantomJS",B=(l=l.version||null)&&l.major+"."+l.minor+"."+l.patch):"number"==typeof C.documentMode&&(l=/\bTrident\/(\d+)/i.exec(n))?(B=[B,C.documentMode],(l=+l[1]+4)!=B[1]&&(N.push("IE "+B[1]+" mode"),Q&&(Q[1]=""),B[1]=l),B="IE"==W?String(B[1].toFixed(1)):B[0]):"number"==typeof C.documentMode&&/^(?:Chrome|Firefox)\b/.test(W)&&(N.push("masking as "+W+" "+B),W="IE",B="11.0",Q=["Trident"],z="Windows");else if(T&&(M=(l=T.lang.System).getProperty("os.arch"),z=z||l.getProperty("os.name")+" "+l.getProperty("os.version")),O){try{B=i.require("ringo/engine").version.join("."),W="RingoJS"}catch(e){(l=i.system)&&l.global.system==i.system&&(W="Narwhal",z||(z=l[0].os||null))}W||(W="Rhino")}else"object"==_typeof(i.process)&&!i.process.browser&&(l=i.process)&&("object"==_typeof(l.versions)&&("string"==typeof l.versions.electron?(N.push("Node "+l.versions.node),W="Electron",B=l.versions.electron):"string"==typeof l.versions.nw&&(N.push("Chromium "+B,"Node "+l.versions.node),W="NW.js",B=l.versions.nw)),W||(W="Node.js",M=l.arch,z=l.platform,B=(B=/[\d.]+/.exec(l.version))?B[0]:null));z=z&&d(z)}if(B&&(l=/(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(B)||/(?:alpha|beta)(?: ?\d)?/i.exec(n+";"+(R&&o.appMinorVersion))||/\bMinefield\b/i.test(n)&&"a")&&(D=/b/i.test(l)?"beta":"alpha",B=B.replace(RegExp(l+"\\+?$"),"")+("beta"==D?L:P)+(/\d+\+?/.exec(l)||"")),"Fennec"==W||"Firefox"==W&&/\b(?:Android|Firefox OS)\b/.test(z))W="Firefox Mobile";else if("Maxthon"==W&&B)B=B.replace(/\.[\d.]+/,".x");else if(/\bXbox\b/i.test(_))"Xbox 360"==_&&(z=null),"Xbox 360"==_&&/\bIEMobile\b/.test(n)&&N.unshift("mobile mode");else if(!/^(?:Chrome|IE|Opera)$/.test(W)&&(!W||_||/Browser|Mobi/.test(W))||"Windows CE"!=z&&!/Mobi/i.test(n))if("IE"==W&&R)try{null===i.external&&N.unshift("platform preview")}catch(e){N.unshift("embedded")}else(/\bBlackBerry\b/.test(_)||/\bBB10\b/.test(n))&&(l=(RegExp(_.replace(/ +/g," *")+"/([.\\d]+)","i").exec(n)||0)[1]||B)?(l=[l,/BB10/.test(n)],z=(l[1]?(_=null,F="BlackBerry"):"Device Software")+" "+l[0],B=null):this!=f&&"Wii"!=_&&(R&&I||/Opera/.test(W)&&/\b(?:MSIE|Firefox)\b/i.test(n)||"Firefox"==W&&/\bOS X (?:\d+\.){2,}/.test(z)||"IE"==W&&(z&&!/^Win/.test(z)&&B>5.5||/\bWindows XP\b/.test(z)&&B>8||8==B&&!/\bTrident\b/.test(n)))&&!a.test(l=e.call(f,n.replace(a,"")+";"))&&l.name&&(l="ing as "+l.name+((l=l.version)?" "+l:""),a.test(W)?(/\bIE\b/.test(l)&&"Mac OS"==z&&(z=null),l="identify"+l):(l="mask"+l,W=A?d(A.replace(/([a-z])([A-Z])/g,"$1 $2")):"Opera",/\bIE\b/.test(l)&&(z=null),R||(B=null)),Q=["Presto"],N.push(l));else W+=" Mobile";(l=(/\bAppleWebKit\/([\d.]+\+?)/i.exec(n)||0)[1])&&(l=[parseFloat(l.replace(/\.(\d)$/,".0$1")),l],"Safari"==W&&"+"==l[1].slice(-1)?(W="WebKit Nightly",D="alpha",B=l[1].slice(0,-1)):B!=l[1]&&B!=(l[2]=(/\bSafari\/([\d.]+\+?)/i.exec(n)||0)[1])||(B=null),l[1]=(/\bChrome\/([\d.]+)/i.exec(n)||0)[1],537.36==l[0]&&537.36==l[2]&&parseFloat(l[1])>=28&&"WebKit"==Q&&(Q=["Blink"]),R&&(x||l[1])?(Q&&(Q[1]="like Chrome"),l=l[1]||((l=l[0])<530?1:l<532?2:l<532.05?3:l<533?4:l<534.03?5:l<534.07?6:l<534.1?7:l<534.13?8:l<534.16?9:l<534.24?10:l<534.3?11:l<535.01?12:l<535.02?"13+":l<535.07?15:l<535.11?16:l<535.19?17:l<536.05?18:l<536.1?19:l<537.01?20:l<537.11?"21+":l<537.13?23:l<537.18?24:l<537.24?25:l<537.36?26:"Blink"!=Q?"27":"28")):(Q&&(Q[1]="like Safari"),l=(l=l[0])<400?1:l<500?2:l<526?3:l<533?4:l<534?"4+":l<535?5:l<537?6:l<538?7:l<601?8:"8"),Q&&(Q[1]+=" "+(l+="number"==typeof l?".x":/[.+]/.test(l)?"":"+")),"Safari"==W&&(!B||parseInt(B)>45)&&(B=l)),"Opera"==W&&(l=/\bzbov|zvav$/.exec(z))?(W+=" ",N.unshift("desktop mode"),"zvav"==l?(W+="Mini",B=null):W+="Mobile",z=z.replace(RegExp(" *"+l+"$"),"")):"Safari"==W&&/\bChrome\b/.exec(Q&&Q[1])&&(N.unshift("desktop mode"),W="Chrome Mobile",B=null,/\bOS X\b/.test(z)?(F="Apple",z="iOS 4.3+"):z=null),B&&0==B.indexOf(l=/[\d.]+$/.exec(z))&&n.indexOf("/"+l+"-")>-1&&(z=y(z.replace(l,""))),Q&&!/\b(?:Avant|Nook)\b/.test(W)&&(/Browser|Lunascape|Maxthon/.test(W)||"Safari"!=W&&/^iOS/.test(z)&&/\bSafari\b/.test(Q[1])||/^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(W)&&Q[1])&&(l=Q[Q.length-1])&&N.push(l),N.length&&(N=["("+N.join("; ")+")"]),F&&_&&_.indexOf(F)<0&&N.push("on "+F),_&&N.push((/^on /.test(N[N.length-1])?"":"on ")+_),z&&(l=/ ([\d.+]+)$/.exec(z),c=l&&"/"==z.charAt(z.length-l[0].length-1),z={architecture:32,family:l&&!c?z.replace(l[0],""):z,version:l?l[1]:null,toString:function(){var e=this.version;return this.family+(e&&!c?" "+e:"")+(64==this.architecture?" 64-bit":"")}}),(l=/\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(M))&&!/\bi686\b/i.test(M)?(z&&(z.architecture=64,z.family=z.family.replace(RegExp(" *"+l),"")),W&&(/\bWOW64\b/i.test(n)||R&&/\w(?:86|32)$/.test(o.cpuClass||o.platform)&&!/\bWin64; x64\b/i.test(n))&&N.unshift("32-bit")):z&&/^OS X/.test(z.family)&&"Chrome"==W&&parseFloat(B)>=39&&(z.architecture=64),n||(n=null);var $={};return $.description=n,$.layout=Q&&Q[0],$.manufacturer=F,$.name=W,$.prerelease=D,$.product=_,$.ua=n,$.version=W&&B,$.os=z||{architecture:null,family:null,version:null,toString:function(){return"null"}},$.parse=e,$.toString=function(){return this.description||""},$.version&&N.unshift(B),$.name&&N.unshift(W),z&&W&&(z!=String(z).split(" ")[0]||z!=W.split(" ")[0]&&!_)&&N.push(_?"("+z+")":"on "+z),N.length&&($.description=N.join(" ")),$}();"function"==typeof define&&"object"==_typeof(define.amd)&&define.amd?(t.platform=v,define(function(){return v})):n&&i?f(v,function(e,t){n[t]=e}):t.platform=v}).call(this),function(){var e=function(e){for(var t=window.location.search.substring(1).split("&"),n=0;n<t.length;n++){var i=t[n].split("=");if(i[0]===e)return decodeURIComponent(i[1].replace(/\+/g,"%20"))}}("zapytanie");e&&(document.getElementById("search-box").setAttribute("value",e),function(e,t){var n=document.getElementById("search-results"),i=document.querySelector("#search-results");if(e.length){for(var r="",o=0;o<e.length;o++){var a=t[e[o].ref];r+='<li title="'+a.title+'" class="search__element" data-site-href="'+a.url+'"><ul class="list-unstyled"><li><span>'+a.author+", "+a.date+'</span></li></ul><h3 class="search__title"><a class="search__link js-search__link" href="'+a.url+'">'+a.title+"</a></h3>",r+='<p class="search__description">'+a.content.substring(0,200)+'...</p><a href="'+a.url+'" class="btn btn-primary">Czytaj cały artykuł</a></li>'}n.innerHTML=r;var s=(new Date).getTime()-BJtimerStart,l=document.getElementsByTagName("body")[0],u=document.querySelector(".js-search-result"),c=document.querySelectorAll(".search__element").length;l.setAttribute("data-page-loaded",s/1e3+" sekund"),u.innerHTML="Wyniki: "+c+" (w "+s/1e3+" s)",i.classList.remove("search--empty")}else n.innerHTML='<li class="search__element--empty">Uuuups.<br>Nie znaleziono wyników odpowiadających Twojemu zapytaniu.</li>',i.classList.add("search--empty")}(lunr(function(){this.field("id"),this.field("title",{boost:10}),this.field("author"),this.field("category"),this.field("content"),this.metadataWhitelist=["position"];for(var e in window.store)this.add({id:e,title:window.store[e].title,author:window.store[e].author,category:window.store[e].category,content:window.store[e].content})}).search(e),window.store));null!==document.querySelector(".form")&&document.querySelector(".form").addEventListener("submit",function(e){var n=this.querySelector(".form-control"),i=n.value;""!==n.value&&i!==t||e.preventDefault()});var t=document.location.search.split("&")[0].replace("?","").split("=")[1];if("zapytanie"!==document.location.search.split("&")[0].replace("?","").split("=")[0]){var n=document.querySelector(".js-search-result");null!==n&&(n.innerHTML="Wpisz frazę aby wyszukać")}}(),function(){if("function"==typeof NodeList.prototype.forEach)return!1;NodeList.prototype.forEach=Array.prototype.forEach}();var bJekyll=bJekyll||{};bJekyll={utilities:{detectPlatforms:function(){document.getElementsByTagName("body")[0].setAttribute("data-platform-name",platform.name),document.getElementsByTagName("body")[0].setAttribute("data-platform-version",platform.version),document.getElementsByTagName("body")[0].setAttribute("data-platform-layout",platform.layout),document.getElementsByTagName("body")[0].setAttribute("data-platform-os",platform.os),document.getElementsByTagName("body")[0].setAttribute("data-platform-description",platform.description)},linkedElement:function(){document.querySelectorAll("[data-site-href]").forEach(function(e){e.classList.add("element--clickable"),e.addEventListener("click",function(){window.location.href=this.getAttribute("data-site-href")})})},createPostsLayout:function(e){null!==document.querySelector(e)&&document.querySelector(e).querySelectorAll(".btn--posts").forEach(function(e){e.addEventListener("mouseover",function(){e.classList.add("hovered"),e.parentNode.closest("div").previousSibling.previousElementSibling.classList.add("hovered")}),e.addEventListener("mouseout",function(){e.classList.remove("hovered"),e.parentNode.closest("div").previousSibling.previousElementSibling.classList.remove("hovered")})})},cookiesManager:{cookiesLinkAccepted:document.querySelector(".js-cookies-manager--accepted"),getCookie:function(e){e+="=";for(var t=decodeURIComponent(document.cookie).split(";"),n=0;n<t.length;n++){for(var i=t[n];" "==i.charAt(0);)i=i.substring(1);if(0==i.indexOf(e))return i.substring(e.length,i.length)}return""},checkCookie:function(e){var t=this;if(""===this.getCookie(e)){t.cookiesLinkAccepted.parentElement.classList.add("animation");var n=window.getComputedStyle(this.cookiesLinkAccepted.parentElement).getPropertyValue("animation-duration").replace("s","");""!==n&&setTimeout(function(){t.cookiesLinkAccepted.parentElement.classList.add("bounceInRight")},1e3*n),this.setCookie(e,"Cookies accepted",365)}else t.cookiesLinkAccepted.parentElement.outerHTML=""},setCookie:function(e,t,n){null!==this.cookiesLinkAccepted&&this.cookiesLinkAccepted.addEventListener("click",function(i){var r=this,o=new Date;o.setTime(o.getTime()+24*n*60*60*1e3);var a="expires="+o.toUTCString();document.cookie=e+"="+t+";"+a+";path=/",r.parentElement.classList.add("animation","bounceOutRight");var s=window.getComputedStyle(r.parentElement).getPropertyValue("animation-duration").replace("s","");""!==s&&setTimeout(function(){r.parentElement.outerHTML=""},1e3*s)})}}}},document.addEventListener("DOMContentLoaded",function(e){if(bJekyll.utilities.linkedElement(),bJekyll.utilities.detectPlatforms(),bJekyll.utilities.createPostsLayout(".posts-wrapper"),bJekyll.utilities.cookiesManager.checkCookie("bJekyll cookies accepted"),document.querySelectorAll(".tiny-slider").length>0)tns({container:".tiny-slider",items:1,nav:!1,slideBy:"page",loop:!1,lazyload:!0,autoplay:!1,controlsText:['<i class="fa fa-angle-left" aria-hidden="true"></i>','<i class="fa fa-angle-right" aria-hidden="true"></i>']});lozad(".lozad",{threshold:.1,load:function(e){e.src=e.dataset.src,void 0!==e.dataset.backgroundImage&&(e.style.backgroundImage="url("+e.dataset.backgroundImage+")"),e.onload=function(){e.classList.add("lazy-fade")}}}).observe()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
